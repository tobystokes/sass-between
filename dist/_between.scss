@charset 'utf-8';
// TODO: build this in, import-once or what?
@import "node_modules/unitconversion/unitconversion";

/// Lower lock value - minimum screen width to apply range
/// @type Number (unit)
$between-min: 360px !default;

/// Upper lock value - maximum screen width to apply range
/// @type Number (unit)
$between-max: 1200px !default;

/// direction in which to respond to.
/// accepts width | height (or shorthand) w | h
/// @type String
$between-dimension: width !default;

/**
 * Computes a CSS calc function that betweens a value from
 * A to B over viewport-width A to viewport-width B.
 * Requires a media query to cap the value at B.
 */

@function between($lower, $upper, $lower-width, $upper-width, $dimension-max) {
  /* units:
    passed-in units and gate sizes could be any unit.
    in practice, might be px em or rem.
    suggest preserve whatever was used on input
    */

  // one of these may be zero, but the other may contain a unit
  $unit: null;
  @if unitless($lower) == true {
    $unit: unit($lower);
  } @else {
    $unit: unit($upper);
  }
  // but if they are both blank, assume px
  @if $unit == "" {
    $unit: px;
  }
  // @debug unit is $lower, $upper, $unit;

  // Sass > 3.5, Passing a string to call() is deprecated
  @if function-exists("get-function") {
    $unit: get-function($unit);
  }

  // slope is difference
  $slope: call($unit, $lower - $upper) /
    call($unit, $lower-width - $upper-width);
  $base: call($unit, $upper) - $slope * call($unit, $upper-width);

  $baseandunit: call($unit, $base);

  @return calc(#{$baseandunit} + #{$dimension-max * $slope});
}

/// Check whether inputs are single values or lists,
/// We can only interpolate if lists are the same length, and use the same unit
///
/// @param {Number} $lower - 1st value to check
/// @param {Number} $upper  - 2nd value to check
///
/// @returns {Number}
@function check-lists($lower, $upper) {
  $lowerlistlength: length($lower);
  $otherlistlength: length($upper);
  @if $lowerlistlength != $otherlistlength {
    @warn "Start and End values must have the same number of properties.";
  }
  @for $i from 1 through $lowerlistlength {
    @if not comparable(nth($lower, $i), nth($upper, $i)) {
      @error "Start and End units not matching for #{nth($lower, $i)} / #{nth($upper, $i)}";
    }
    @if unit(nth($lower, $i)) == "%" or unit(nth($upper, $i)) == "%" {
      @warn Cannot use percent as a unit (yet);
    }
  }
  @return $lowerlistlength;
}

/// Mixin to apply base and media queried values
/// for the between @function.
/// @param {String} $property - css property to apply calculated values to.
/// @param {Number | List} $lower - lower value (or list of values) to use
/// @param {Number | List} $upper  - upper value (or list of values) to use
/// @param {Number} $lower-width [$between-min] - pass a custom $between-min value
/// @param {Number} $upper-width [$between-max]  - pass a custom $between-max value
/// @param {String} $dimension [$between-dimension]  - pass a custom $dimension value (height, not width)
/// @example scss
///  @include between(font-size, 16px, 24px);
@mixin between(
  $property,
  $lower,
  $upper,
  $lower-width: $between-min,
  $upper-width: $between-max,
  $dimension: $between-dimension
) {
  $listlength: check-lists($lower, $upper);

  #{$property}: $lower;

  $dimension-max: 100vw;
  $dimension-mq: min-width;
  @if str-slice($dimension, 1, 1) == "h" {
    $dimension-max: 100vh;
    $dimension-mq: min-height;
  }

  @media ($dimension-mq: $lower-width) {
    $list-values: ();
    @for $i from 1 through $listlength {
      $list-values: append(
        $list-values,
        between(
          nth($lower, $i),
          nth($upper, $i),
          $lower-width,
          $upper-width,
          $dimension-max
        )
      );
    }
    #{$property}: $list-values;
  }

  @media ($dimension-mq: $upper-width) {
    #{$property}: $upper;
  }
}
